---
import { getCollection } from 'astro:content';
import { type CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import BlogPostLayout from '../../../layouts/BaseLayout.astro';
import { calculateReadingTime, slugify } from '../../../components/ts/utils.ts';
import type { ImageMetadata } from 'astro';
import IconButton from '../../../components/Button/IconButton.astro';
import ShareButtons from '../../../components/Button/ShareButtons.astro';
import '../../blog/_blog-post-content.scss';

export const prerender = true;

export const getStaticPaths = async () => {
    const posts = await getCollection('blog');
    const englishPosts = posts.filter((post) => post.data.language === 'English');

    const paths = englishPosts.map((post) => {
        const minutesRead = calculateReadingTime(post.body);

        return {
            params: {
                slug: post.slug,
            },
            props: {
                post,
                minutesRead,
            },
        };
    });
    return paths;
};

const authors = await getCollection('authors');

const images = await import.meta.glob<{ default: ImageMetadata }>('../../../images/uploads/**/*.{jpeg,jpg,png,gif}');
const imagesMobil = await import.meta.glob<{ default: ImageMetadata }>(
    '../../../images/uploads/**/*.{jpeg,jpg,png,gif}'
);

function resolveImage(path: string | undefined, imageMap: Record<string, () => Promise<{ default: ImageMetadata }>>) {
    if (!path) return null;
    const cleanPath = path.replace(/^\.\.\/+(images\/uploads\/)?/, '');
    const match = Object.keys(imageMap).find((key) => key.endsWith(cleanPath));
    return match ? imageMap[match] : null;
}

type Props = {
    post: CollectionEntry<'blog'>;
    minutesRead: number;
};

const { post, minutesRead } = Astro.props;
const { Content } = await post.render();
const currentAuthor = authors.find((author) => author.data.name === post.data.author);
const authorImageResolver = resolveImage(currentAuthor?.data.authorimage, images);
const ogImage = resolveImage(post.data.image, images);
const ogImageMobil = resolveImage(post.data.imageMobil, imagesMobil);
const formattedDate = new Date(post.data.date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
});
---

<BlogPostLayout
    title={post.data.title}
    language={post.data.language}
    image={ogImage ? (await ogImage()).default : null}
    canonical={post.data.canonical}
    canonicalLanguage={post.data.canonicalLanguage}
    titleBackground={post.data.titleBackground}
    description={post.data.description}
>
    {
        ogImage && (
            <section class="blog-content__desktop-image">
                <Image src={(await ogImage()).default} alt={post.data.title} />
                <h1 class="container container--tight-desktop image_title">
                    <span class={post.data.titleBackground ? 'title-with-background' : ''}>{post.data.title}</span>
                </h1>
            </section>
        )
    }
    {
        ogImageMobil && (
            <section class="blog-content__mobile-image">
                <Image src={(await ogImageMobil()).default} alt={post.data.title} />
                <h1 class="container image_title">
                    <span class={post.data.titleBackground ? 'title-with-background' : ''}>{post.data.title}</span>
                </h1>
            </section>
        )
    }
    <div class="container container--tight-desktop blog-content__container mt-20px">
        <div class="blog-content__main">
            <div class="blog-content__info-row mb-20px">
                <div class="blog-content__info-item blog-content__info-item--author display-flex align-items-center">
                    {
                        authorImageResolver && (
                            <Image
                                src={(await authorImageResolver()).default}
                                alt={currentAuthor.data.name}
                                class="author__avatar author__avatar--small"
                            />
                        )
                    }
                    <p class="clr-shades-gray">
                        <a href={`/blog/author/${slugify(post.data.author)}`}>{post.data.author}</a>
                    </p>
                </div>
                <div class="blog-content__info-item blog-content__info-item--date">
                    <p class="clr-shades-gray">{formattedDate}</p>
                </div>
                <div class="blog-content__info-item blog-content__info-item--read-time">
                    <p class="clr-shades-gray">{minutesRead} min read</p>
                </div>
                <div class="blog-content__info-item blog-content__info-item--tags blog__tag">
                    <p>{post.data.tags}</p>
                </div>
            </div>
            <article class="blog-content__article">
                <Content />
            </article>
            <div class="separator-horizontal"></div>
            <ShareButtons lang="en" />
            <IconButton
                variant="third-naked-orange"
                iconName="ArrowLeft"
                iconClass="orange"
                class="mt-20px link-orange no-padding mb-40px back-button"
                ariaLabel="Back to previous page"
            >
                Back to previous page
            </IconButton>
        </div>
    </div>
</BlogPostLayout>

<script>
    document.querySelector('.back-button')?.addEventListener('click', (e) => {
        e.preventDefault();
        if (window.history.length > 1) {
            window.history.back();
        } else {
            window.location.href = '/blog/';
        }
    });
</script>
