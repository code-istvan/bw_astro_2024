---
import { getCollection } from 'astro:content';
import { type CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import TagList from '../../components/Blog/TagList.astro';
import PopularPosts from '../../components/Blog/PopularPosts.astro';
import BlogPostLayout from '../../layouts/BaseLayout.astro';
import { calculateReadingTime, slugify, formatDate } from '../../components/js/utils.js';
import type { ImageMetadata } from 'astro';

export const prerender = true;

export const getStaticPaths = async () => {
    const posts = await getCollection('blog');

    const paths = posts.map((post) => {
        const minutesRead = calculateReadingTime(post.body);

        return {
            params: {
                slug: post.slug,
            },
            props: {
                post,
                minutesRead,
            },
        };
    });
    return paths;
};

const authors = await getCollection('authors');

const images = await import.meta.glob<{ default: ImageMetadata }>('/src/images/uploads/**/*.{jpeg,jpg,png,gif}');
const imagesMobil = await import.meta.glob<{ default: ImageMetadata }>('/src/images/uploads/**/*.{jpeg,jpg,png,gif}');

type Props = {
    post: CollectionEntry<'blog'>;
    minutesRead: number;
};

const { post, minutesRead } = Astro.props;
const { Content } = await post.render();
const currentAuthor = authors.find((author) => author.data.name === post.data.author);
---

<BlogPostLayout title={post.data.title}>
    {
        post.data.image && (
            <section class="blog-content__desktop-image">
                <Image src={images[`/${post.data.image}`]()} alt={post.data.title} />
                {/* <h1 class="image_title">{post.data.title}</h1> */}
            </section>
        )
    }
    {
        post.data.imageMobil && (
            <section class="blog-content__mobile-image">
                <Image src={imagesMobil[`/${post.data.imageMobil}`]()} alt={post.data.title} />
            </section>
        )
    }
    <div class="container blog-content__container mt-40px">
        <div class="blog-content__main">
            <h1 class="blog-content__title">{post.data.title}</h1>
            <div class="blog-content__info-row mt-20px mb-20px">
                <div class="blog-content__info-item blog-content__info-item--author display-flex align-items-center">
                    <Image
                        src={images[currentAuthor?.data.authorimage]()}
                        alt={currentAuthor?.data.name}
                        class="author__avatar author__avatar--small"
                    />
                    <p><a href={`/blog/author/${slugify(post.data.author)}`}>{post.data.author}</a></p>
                </div>
                <div class="blog-content__info-item blog-content__info-item--date">
                    <p>{formatDate(post.data.date)}</p>
                </div>
                <div class="blog-content__info-item blog-content__info-item--read-time">
                    <p>{Astro.props.minutesRead} perc olvasás</p>
                </div>
                <div class="blog-content__info-item blog-content__info-item--tags blog__tag">
                    <p>{post.data.tags}</p>
                </div>
            </div>
            <Content />
        </div>
        <!-- Blog Sidebar - csak desktopon látható, a meglévő .hidden-mobile osztállyal rejtjük mobilon -->
        <div class="blog-content__sidebar hidden-mobile">
            <h4 class="blog-content__sidebar-title mb-20px">CIMKÉK</h4>
            <TagList />
            <div class="blog-content__popular-posts mt-40px">
                <h4 class="blog-content__popular-posts-title mb-20px">LEGKEDVELTEBB BEJEGZÉSEK</h4>
                <PopularPosts />
            </div>
        </div>
    </div>
</BlogPostLayout>

<style lang="scss">
    @import '/src/sass/base/_colors';

    //
    .blog-content__container {
        display: flex;
        flex-direction: row;
    }

    .blog-content__main {
        display: flex;
        flex-direction: column;
    }

    .blog-content__sidebar {
        position: sticky;
        top: 80px;
        height: fit-content;
        overflow: hidden auto;
        flex: 0 0 250px;
        margin-left: 20px;

        -ms-overflow-style: none; /* IE 10+ */
        scrollbar-width: none; /* Firefox */

        &::-webkit-scrollbar {
            display: none; /* Safari and Chrome */
        }
    }

    .blog-content__desktop-image,
    .blog-content__mobile-image {
        img {
            max-width: 100vw;
            width: 100%;
            height: auto;
        }
    }
    @media (max-width: 768px) {
        .blog-content__desktop-image {
            display: none;
        }
    }

    @media (min-width: 768px) {
        .blog-content__mobile-image {
            display: none;
        }
    }

    /* Alapértelmezett desktop nézet */
    .blog-content__info-row {
        display: grid;
        grid-template-columns: auto auto auto auto; /* Tartalomhoz igazodó oszlopszélesség */
        gap: 10px; /* Opcionális hézag a cellák között */
        justify-content: start; /* A teljes sor igazítása balra */
        align-items: center;
    }

    @media (max-width: 768px) {
        .blog-content__info-row {
            grid-template-columns: repeat(2, 1fr);
        }

        .blog-content__info-item--author {
            order: 1;
            justify-self: start;
        }

        .blog-content__info-item--tags {
            order: 2;
            justify-self: end;
            align-self: center;
        }

        .blog-content__info-item--date {
            order: 3;
            justify-self: start;
        }

        .blog-content__info-item--read-time {
            order: 4;
            justify-self: end;
        }
    }
</style>
