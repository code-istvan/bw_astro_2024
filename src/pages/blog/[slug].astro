---
import { getCollection } from 'astro:content';
import { type CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import TagList from '../../components/Blog/TagList.astro';
import PopularPosts from '../../components/Blog/PopularPosts.astro';
import BlogPostLayout from '../../layouts/BaseLayout.astro';
import { calculateReadingTime, slugify, formatDate } from '../../components/js/utils.js';
import type { ImageMetadata } from 'astro';

export const prerender = true;

export const getStaticPaths = async () => {
    const posts = await getCollection('blog');

    const paths = posts.map((post) => {
        const minutesRead = calculateReadingTime(post.body);

        return {
            params: {
                slug: post.slug,
            },
            props: {
                post,
                minutesRead,
            },
        };
    });
    return paths;
};

const authors = await getCollection('authors');

const images = await import.meta.glob<{ default: ImageMetadata }>('/src/images/uploads/**/*.{jpeg,jpg,png,gif}');
const imagesMobil = await import.meta.glob<{ default: ImageMetadata }>('/src/images/uploads/**/*.{jpeg,jpg,png,gif}');

type Props = {
    post: CollectionEntry<'blog'>;
    minutesRead: number;
};

const { post, minutesRead } = Astro.props;
const { Content } = await post.render();
const currentAuthor = authors.find((author) => author.data.name === post.data.author);
---

<BlogPostLayout title={post.data.title}>
    {
        post.data.image && (
            <section class="desktop_image">
                <Image src={images[`/${post.data.image}`]()} alt={post.data.title} />
                {/* <h1 class="image_title">{post.data.title}</h1> */}
            </section>
        )
    }
    {
        post.data.imageMobil && (
            <section class="mobile_image">
                <Image src={imagesMobil[`/${post.data.imageMobil}`]()} alt={post.data.title} />
            </section>
        )
    }
    <div class="container blog-content__container mt-40px">
        <div class="blog-content">
            <div class="blog-main">
                <h1>{post.data.title}</h1>
                <div class="sor mt-20px mb-20px">
                    <div class="oszlop oszlop1 row align-items-center">
                        <Image
                            src={images[currentAuthor?.data.authorimage]()}
                            alt={currentAuthor?.data.name}
                            class="author__avatar author__avatar--small"
                        />

                        <p><a href={`/blog/author/${slugify(post.data.author)}`}>{post.data.author}</a></p>
                    </div>
                    <div class="oszlop oszlop2"><p>{formatDate(post.data.date)}</p></div>
                    <div class="oszlop oszlop3"><p>Olvasási idő: {Astro.props.minutesRead} perc</p></div>
                    <div class="oszlop oszlop4"><p>{post.data.tags}</p></div>
                </div>
                <Content />
            </div>
            <!-- Blog Sidebar - csak desktopon látható, a meglévő .hidden-mobile osztállyal rejtjük mobilon -->
            <div class="blog-sidebar hidden-mobile">
                <h4 class="mb-20px">CIMKÉK</h4>
                <TagList />
                <div class="sidebar-widget mt-40px">
                    <h4 class="mb-20px">LEGKEDVELTEBB BEJEGZÉSEK</h4>
                    <PopularPosts />
                </div>
            </div>
        </div>
    </div>
</BlogPostLayout>

<style lang="scss">
    @import '/src/sass/base/_colors';

    //
    .blog-content__container {
        display: flex;
        flex-direction: column;
    }

    .blog-content {
        display: flex;
        flex-direction: row;
    }

    .blog-sidebar {
        position: sticky;
        top: 80px;
        height: fit-content;
        display: block;
        overflow: hidden auto;
        flex: 0 0 250px; /* Oldalsáv szélessége */
        margin-left: 20px;
    }

    .blog-sidebar {
        -ms-overflow-style: none; /* Internet Explorer 10+ */
        scrollbar-width: none; /* Firefox */
    }
    .blog-sidebar::-webkit-scrollbar {
        display: none; /* Safari and Chrome */
    }

    /* Csak desktop nézetben rendezze el sorba */
    // @media (min-width: 768px) {
    //     .blog-content {
    //         flex-direction: row;
    //     }
    // }

    .post-wrapper:not(:last-child) {
        border-bottom: 1px solid $color-shades-lightBlack; /* Alsó fehér vonal */
        padding-bottom: 10px; /* Távolság a szövegtől */
        margin-bottom: 24px; /* Távolság a következő elemtől */
    }
    //

    .mobile_image,
    .desktop_image {
        img {
            max-width: 100vw;
            width: 100%;
            height: auto;
        }
    }

    @media (max-width: 768px) {
        .desktop_image {
            display: none;
        }
    }

    @media (min-width: 768px) {
        .mobile_image {
            display: none;
        }
    }

    /* Alapértelmezett desktop nézet */
    .sor {
        display: grid;
        grid-template-columns: auto auto auto auto; /* Tartalomhoz igazodó oszlopszélesség */
        gap: 10px; /* Opcionális hézag a cellák között */
        justify-content: start; /* A teljes sor igazítása balra */
        align-items: center;
    }

    @media (max-width: 768px) {
        /* Mobil nézet */
        .sor {
            grid-template-columns: repeat(2, 1fr); /* 2 oszlop több sorral */
        }

        .oszlop1 {
            order: 1;
            justify-self: start; /* Balra igazítás */
        }

        .oszlop4 {
            order: 2;
            justify-self: end; /* Jobbra igazítás */
            align-self: center;
        }

        .oszlop2 {
            order: 3;
            justify-self: start; /* Balra igazítás */
        }

        .oszlop3 {
            order: 4;
            justify-self: end; /* Jobbra igazítás */
        }
    }
</style>
