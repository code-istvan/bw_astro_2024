<!-- ---

export async function downloadServerImages(serverUrl: string, localSavePath: string = './downloaded-images') {
    if (import.meta.env.SSR) {
        const fs = await import('fs');
        const path = await import('path');
        const { promises: fsPromises } = fs;

        try {
            if (!fs.existsSync(localSavePath)) {
                await fsPromises.mkdir(localSavePath, { recursive: true });
            }

            const baseUrl = serverUrl.endsWith('/') ? serverUrl : `${serverUrl}/`;

            let imageUrls: string[] = [];

            try {
                const response = await fetch(baseUrl);

                if (!response.ok) {
                    throw new Error(`Error accessing ${baseUrl}: ${response.statusText}`);
                }

                const contentType = response.headers.get('content-type') || '';

                if (contentType.includes('application/json')) {
                    imageUrls = await response.json();
                } else if (contentType.includes('text/html')) {
                    const html = await response.text();

                    const regex = /href=["']([^"']+\.(jpg|jpeg|png|gif|webp|avif|svg))["']/gi;
                    let match;

                    while ((match = regex.exec(html)) !== null) {
                        const imagePath = match[1];
                        if (imagePath.startsWith('http')) {
                            imageUrls.push(imagePath);
                        } else {
                            const normalizedPath = imagePath.replace(/^\.\.\/|^\.\//, '');
                            imageUrls.push(new URL(normalizedPath, baseUrl).href);
                        }
                    }
                } else {
                    throw new Error(`The content at ${baseUrl} is not compatible (${contentType})`);
                }
            } catch (error) {
                console.error(`Error getting image list from ${baseUrl}:`, error);

                console.log(`Could not automatically get image list from ${baseUrl}`);
                console.log('Trying with common image extensions...');

                const extensions = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'];
                const testFiles = ['image', 'photo', 'img', 'pic', 'test', 'banner', 'logo', 'icon'];

                for (const extension of extensions) {
                    for (const file of testFiles) {
                        imageUrls.push(`${baseUrl}${file}.${extension}`);
                    }
                    for (let i = 1; i <= 10; i++) {
                        imageUrls.push(`${baseUrl}${i}.${extension}`);
                        imageUrls.push(`${baseUrl}image${i}.${extension}`);
                    }
                }
            }

            console.log(`Attempting to download ${imageUrls.length} possible images...`);

            const downloadResults = await Promise.all(
                imageUrls.map(async (imageUrl) => {
                    try {
                        const fileName = imageUrl.split('/').pop();
                        if (!fileName) throw new Error(`Invalid filename: ${imageUrl}`);

                        const filePath = path.join(localSavePath, fileName);

                        const imageResponse = await fetch(imageUrl);
                        if (!imageResponse.ok) {
                            throw new Error(`Error downloading image ${imageUrl}: ${imageResponse.statusText}`);
                        }

                        const contentType = imageResponse.headers.get('content-type') || '';
                        if (!contentType.includes('image/')) {
                            throw new Error(`File is not an image: ${contentType}`);
                        }

                        const arrayBuffer = await imageResponse.arrayBuffer();
                        const buffer = Buffer.from(arrayBuffer);

                        await fsPromises.writeFile(filePath, buffer);

                        console.log(`✅ Downloaded: ${imageUrl} -> ${filePath}`);

                        return {
                            url: imageUrl,
                            localPath: filePath,
                            success: true,
                        };
                    } catch (error) {
                        console.error(`❌ Error downloading ${imageUrl}:`, error);
                        return {
                            url: imageUrl,
                            success: false,
                            error: (error as Error).message,
                        };
                    }
                })
            );

            const successfulResults = downloadResults.filter((r) => r.success);

            return {
                total: imageUrls.length,
                successful: successfulResults.length,
                failed: downloadResults.length - successfulResults.length,
                details: downloadResults,
            };
        } catch (error) {
            console.error('General error downloading images:', error);
            throw error;
        }
    } else {
        console.warn('The downloadServerImages function only works on the server (SSR)');
        return {
            total: 0,
            successful: 0,
            failed: 0,
            details: [],
        };
    }
}

downloadServerImages('https://mula.bandha.works/images/test/')
    .then((result) => {
        console.log('Download result:', result);
    })
    .catch((error) => {
        console.error('Error in download process:', error);
    });
--- -->
