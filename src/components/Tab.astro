---
const { tab = 'tab1' } = Astro.props;
---

<section class="tabs">
    <ul class="tab-list">
        <li class="tab-item" data-target="tab1">Astanga</li>
        <li class="tab-item" data-target="tab2">Vinyásza Krama</li>
    </ul>
    <div id="tab1" class="tab-content --is-active">
        <p>Ide jön az Astanga tartalma</p>
    </div>
    <div id="tab2" class="tab-content">
        <p>Ide jön az Vinyásza Krama tartalma</p>
    </div>
</section>

<script>
    // Alapvető változók
    const SELECTORS = {
        TAB: '.tab-item',
        CONTENT: '.tab-content',
    };

    // URL-ből olvassuk ki a `tab` paramétert
    const getTabFromURL = () => {
        const params = new URLSearchParams(window.location.search);
        return params.get('tab') || 'tab1'; // Alapértelmezett a 'tab1', ha nincs megadva paraméter
    };

    // A tab váltás logikája
    const changeTab = (tabId) => {
        // Kiválasztjuk az összes tab elemet
        const tabs = document.querySelectorAll<HTMLElement>(SELECTORS.TAB);
        const contents = document.querySelectorAll<HTMLElement>(SELECTORS.CONTENT);

        // Minden tab esetén beállítjuk az aktív állapotot
        tabs.forEach((tab) => {
            const isActive = tab.dataset.target === tabId;
            tab.classList.toggle('--is-active', isActive); // Csak az aktív tab kapja meg az osztályt
        });

        // Minden tartalom esetén beállítjuk az aktív állapotot
        contents.forEach((content) => {
            const isActive = content.id === tabId;
            content.classList.toggle('--is-active', isActive); // Csak az aktív tartalom jelenik meg
        });

        // Frissítjük az URL-t, hogy a megfelelő tabot mutassa
        const url = new URL(window.location.href); // window.location helyett window.location.href
        url.searchParams.set('tab', tabId);
        window.history.replaceState({}, '', url);
    };

    // Inicializálás funkció, amikor az oldal betöltődik
    const initTabs = () => {
        const initialTabId = getTabFromURL(); // URL alapján betöltjük az elsődleges tabot
        const tabs = document.querySelectorAll<HTMLElement>(SELECTORS.TAB);

        // Kattintás esemény kezelése minden tab elemre
        tabs.forEach((tab) => {
            tab.addEventListener('click', () => {
                const tabId = tab.dataset.target; // Lekérdezzük a cél tab id-jét
                changeTab(tabId); // Tab váltás végrehajtása
            });
        });

        // Az elsődleges tab beállítása a betöltéskor
        changeTab(initialTabId);
    };

    // Az oldal betöltődésekor futtatjuk az inicializáló funkciót
    document.addEventListener('DOMContentLoaded', () => {
        initTabs();
    });
</script>

<style>
    /* Alapértelmezetten elrejtjük a tab tartalmat */
    .tab-content {
        display: none;
    }

    /* Csak az aktív tartalom látható */
    .tab-content.--is-active {
        display: block;
    }

    /* Aktív tab stílus */
    .tab-item.--is-active {
        font-weight: bold;
        border-bottom: 2px solid #000;
    }

    /* Tabok alap stílusok */
    .tab-item {
        cursor: pointer;
        padding: 1rem;
        display: inline-block;
    }
</style>

<!-- ---
const { tab = 'tab1' } = Astro.props;
---

<section class="tabs">
    <ul class="tab-list">
        <li class="tab-item" data-target="tab1">Astanga</li>
        <li class="tab-item" data-target="tab2">Vinyásza Krama</li>
    </ul>
    <div id="tab1" class="tab-content --is-active">
        <p>Ide jön az Astanga tartalma</p>
    </div>
    <div id="tab2" class="tab-content">
        <p>Ide jön az Vinyásza Krama tartalma</p>
    </div>
</section>

<script>
    // Alapvető változók
    const SELECTORS = {
        TAB: '.tab-item',
        CONTENT: '.tab-content',
    };

    // A tab váltás logikája
    const changeTab = (tabId) => {
        // Kiválasztjuk az összes tab elemet
        const tabs = document.querySelectorAll<HTMLElement>(SELECTORS.TAB); // HTMLElement-ek lekérése
        const contents = document.querySelectorAll<HTMLElement>(SELECTORS.CONTENT); // HTMLElement-ek lekérése

        // Minden tab esetén beállítjuk az aktív állapotot
        tabs.forEach((tab) => {
            const isActive = tab.dataset.target === tabId; // dataset probléma megoldva
            tab.classList.toggle('--is-active', isActive); // Csak az aktív tab kapja meg az osztályt
        });

        // Minden tartalom esetén beállítjuk az aktív állapotot
        contents.forEach((content) => {
            const isActive = content.id === tabId;
            content.classList.toggle('--is-active', isActive); // Csak az aktív tartalom jelenik meg
        });
    };

    // Inicializálás funkció, amikor az oldal betöltődik
    const initTabs = (initialTabId = 'tab1') => {
        const tabs = document.querySelectorAll<HTMLElement>(SELECTORS.TAB); // HTMLElement típusúvá alakítva

        // Kattintás esemény kezelése minden tab elemre
        tabs.forEach((tab) => {
            tab.addEventListener('click', () => {
                const tabId = tab.dataset.target; // dataset használata HTMLElement típusnál
                changeTab(tabId); // Tab váltás végrehajtása
            });
        });

        // Az elsődleges tab beállítása a betöltéskor
        changeTab(initialTabId);
    };

    // Az oldal betöltődésekor futtatjuk az inicializáló funkciót
    document.addEventListener('DOMContentLoaded', () => {
        initTabs();
    });
</script>

<style>
    /* Alapértelmezetten elrejtjük a tab tartalmat */
    .tab-content {
        display: none;
    }

    /* Csak az aktív tartalom látható */
    .tab-content.--is-active {
        display: block;
    }

    /* Aktív tab stílus */
    .tab-item.--is-active {
        font-weight: bold;
        border-bottom: 2px solid #000;
    }

    /* Tabok alap stílusok */
    .tab-item {
        cursor: pointer;
        padding: 1rem;
        display: inline-block;
    }
</style> -->

<!-- //Ferran kódja -->

<!-- ---
const { tab } = Astro.props;
---

<section class="contact-tabs__wrapper">
    <div class="contact-tabs__inner__wrapper common-wrapper">
        <ul class="contact-tabs flex">
            <li class="contact-tab --underline-on-hover" data-target="tab1">
                <p>Astanga</p>
            </li>
            <li class="contact-tab --underline-on-hover" data-target="tab2">
                <p>Vinyásza krama</p>
            </li>
        </ul>
        <div id="tab1" class="contact-tab__content --is-active"><p>Ashtanga content</p></div>

        <div id="tab2" class="contact-tab__content">
            <p>Vinyasa Krama content</p>
        </div>
    </div>
</section>

<style>
    .contact-tabs__wrapper {
        background-color: light-dark(var(--neutral-light-4), var(--background-main));
        margin: 2rem 0;
        padding: 3rem 0;
    }
    .contact-tabs__inner__wrapper {
        @media (width <= 960px) {
            padding-inline: 1rem;
        }
    }

    .contact-tabs__header {
        gap: 1rem 0;
        margin: 3rem 0;
    }

    .contact-tabs__divider {
        background-color: var(--neutral-light-3);
        height: 1px;
    }
    .contact-tabs__title {
        text-align: start;
    }

    .contact-tab {
        color: var(--neutral-main);
        cursor: pointer;
        padding: 1rem;
        position: relative;
        --border-width: 2px;
    }

    .contact-tab.--is-active {
        border-bottom: 2px solid var(--neutral-main);
        font-weight: bold;
    }
    .contact-tab__content {
        display: none;
        padding: 3rem 0;

        &.--is-active {
            display: block;
        }
    }
</style>

<script define:vars={{ tab }}>
    interface Tab {
        id: string;
        target: string;
    }

    const SELECTORS = {
        TAB: '.contact-tab',
    };

    const changeTab = (tabId: Tab['id']) => {
        const tabs: NodeListOf<HTMLElement> = document.querySelectorAll(SELECTORS.TAB);

        for (const tab of tabs) {
            const tabContentId = tab.dataset.target;
            const tabContent: HTMLElement | null = document.querySelector(`#${tabContentId}`);

            if (!tabContent) continue;

            const isActive = tabContentId === tabId;
            tab.classList.toggle('--is-active', isActive);
            tabContent.classList.toggle('--is-active', isActive);
            tabContent.classList.toggle('--is-hidden', !isActive);
        }
    };

    export function initTabs(initialTabId?: string) {
        const tabs: NodeListOf<HTMLElement> = document.querySelectorAll(SELECTORS.TAB);

        for (const tab of tabs) {
            tab.addEventListener('click', () => {
                const initialTab = initialTabId ?? tabs[0].dataset.target ?? '';
                changeTab(initialTab);
            });
        }

        const initialTab = initialTabId ?? tabs[0].dataset.target ?? '';
        changeTab(initialTab);
    }
    initTabs(tab);
</script> -->
