---
// egy új, szűz .astro file, csak ennyi:
---

<div class="output" id="output-astro-demo">
    <h1 class="cursor"></h1>
    <p></p>
</div>

<style>
    body {
        background-color: #333;
    }

    .output {
        text-align: center;
        font-family: 'Source Code Pro', monospace;
        color: white;
    }
    .output h1 {
        font-size: 30px;
    }
    .cursor::after {
        content: '';
        display: inline-block;
        margin-left: 3px;
        background-color: white;
        animation-name: blink;
        animation-duration: 0.5s;
        animation-iteration-count: infinite;
    }
    h1.cursor::after {
        height: 24px;
        width: 13px;
    }
    p.cursor::after {
        height: 13px;
        width: 6px;
    }
    @keyframes blink {
        0%,
        49% {
            opacity: 1;
        }
        50%,
        100% {
            opacity: 0;
        }
    }
</style>

<script type="module" is:inline>
    window.addEventListener('DOMContentLoaded', () => {
        const textArray = ['Első kérdés?|Válasz első sor', 'Második kérdés?|Második válasz'];
        const output = document.getElementById('output-astro-demo');
        if (!output) return;
        const eHeader = output.querySelector('h1');
        const eParagraph = output.querySelector('p');
        let i = 0,
            a = 0,
            isBackspacing = false,
            isParagraph = false;
        const speedForward = 100,
            speedWait = 1000,
            speedBetweenLines = 1000,
            speedBackspace = 25;
        function typeWriter() {
            const aString = textArray[a];
            if (!isBackspacing) {
                if (i < aString.length) {
                    if (aString.charAt(i) === '|') {
                        isParagraph = true;
                        eHeader.classList.remove('cursor');
                        eParagraph.classList.add('cursor');
                        i++;
                        setTimeout(typeWriter, speedBetweenLines);
                    } else {
                        if (!isParagraph) {
                            eHeader.textContent += aString.charAt(i);
                        } else {
                            eParagraph.textContent += aString.charAt(i);
                        }
                        i++;
                        setTimeout(typeWriter, speedForward);
                    }
                } else if (i === aString.length) {
                    isBackspacing = true;
                    setTimeout(typeWriter, speedWait);
                }
            } else {
                if (eHeader.textContent.length > 0 || eParagraph.textContent.length > 0) {
                    if (eParagraph.textContent.length > 0) {
                        eParagraph.textContent = eParagraph.textContent.substring(0, eParagraph.textContent.length - 1);
                    } else if (eHeader.textContent.length > 0) {
                        eParagraph.classList.remove('cursor');
                        eHeader.classList.add('cursor');
                        eHeader.textContent = eHeader.textContent.substring(0, eHeader.textContent.length - 1);
                    }
                    setTimeout(typeWriter, speedBackspace);
                } else {
                    isBackspacing = false;
                    i = 0;
                    isParagraph = false;
                    a = (a + 1) % textArray.length;
                    setTimeout(typeWriter, 50);
                }
            }
        }
        if (textArray.length > 0) {
            setTimeout(typeWriter, 1000);
        }
    });
</script>
