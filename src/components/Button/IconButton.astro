---
import Icons from '../Icons/Icons.astro';
import './_iconButton.scss';

interface Props {
    href?: string;
    variant?: 'primary' | 'secondary' | 'third' | 'third-naked-orange' | 'btn--third--naked-gray';
    iconName: string;
    iconPosition?: 'left' | 'right';
    iconClass?: string;
    iconColor?: string;
    class?: string;
    ariaLabel?: string;
    hoverEffect?: 'none' | 'iconColor';
    hoverIconColor?: string;
}

const {
    href,
    variant = 'primary',
    iconName,
    iconPosition = 'left',
    iconClass = '',
    iconColor,
    class: className = '',
    ariaLabel,
    hoverEffect = 'none',
    hoverIconColor = 'orange',
} = Astro.props;

const baseClass = 'btn';
const variantClass = variant ? (variant.startsWith('btn--') ? variant : `${baseClass}--${variant}`) : '';
const combinedClass = [baseClass, variantClass, className].filter(Boolean).join(' ');

// ikonhoz adjuk a belső, egységes osztályt a targeteléshez
const iconCombinedClass = ['btn__icon', iconClass].filter(Boolean).join(' ');

// egyszerű "resolver": ha hex/színnév jön, átengedjük változatlanul
const resolveColor = (c?: string) => c ?? 'currentColor';

// CSS változók a normál és hover színhez (hover csak akkor kerül be, ha kell)
const styleVars = [
    iconColor ? `--icon-base-color:${resolveColor(iconColor)}` : '', // alap ikon szín
    hoverEffect === 'iconColor' ? `--icon-hover-color:${resolveColor(hoverIconColor)}` : '', // hover ikon szín
]
    .filter(Boolean)
    .join(';');
---

{
    href ? (
        <a href={href} class={combinedClass} aria-label={ariaLabel} style={styleVars}>
            {iconPosition === 'left' && <Icons name={iconName} class={iconCombinedClass} inheritColor={true} />}
            <span class="btn-content">
                <slot />
            </span>
            {iconPosition === 'right' && <Icons name={iconName} class={iconCombinedClass} inheritColor={true} />}
        </a>
    ) : (
        <button type="button" class={combinedClass} aria-label={ariaLabel} style={styleVars}>
            {iconPosition === 'left' && <Icons name={iconName} class={iconCombinedClass} inheritColor={true} />}
            <span class="btn-content">
                <slot />
            </span>
            {iconPosition === 'right' && <Icons name={iconName} class={iconCombinedClass} inheritColor={true} />}
        </button>
    )
}
