---
import { getCollection } from 'astro:content';
import CourseCard from '../Cards/CourseCard.astro';
export interface Props {
    language: 'HU' | 'EN';
    courseType: 'Ashtanga beginner' | 'Mysore-course';
    teacher?: any;
    class?: string;
    cardClass?: string;
}

const {
    language = 'HU',
    courseType = 'Ashtanga beginner',
    teacher,
    class: className = '',
    cardClass = '',
} = Astro.props;
const courses = await getCollection('courses');

const filteredCourses = courses
    .filter((course) => {
        return course.data.courseType === courseType && course.data.published !== false;
    })
    .sort((a, b) => {
        return new Date(a.data.date) > new Date(b.data.date) ? 1 : -1;
    });

// Oktatók betöltése
const teachers = await getCollection('teachers');

// Összekapcsoljuk a tanfolyamokat az oktatók adataival
const coursesWithTeachers = filteredCourses.map((course) => {
    // Megkeressük az oktató adatait a teacher mező alapján, ami az oktató ID-ja
    const teacherData = teachers.find((teacher) => {
        // Keresünk az oktató ID-ja alapján (a kurzus teacher mezője tartalmazza az oktató ID-ját)
        return teacher.data.teacherId === course.data.teacher;
    });

    // Visszaadjuk a kurzust az oktató adataival együtt
    return {
        course,
        teacherData,
    };
});
---

<div class={`courses-container ${className}`}>
    {
        coursesWithTeachers.length > 0 ? (
            coursesWithTeachers.map(({ course, teacherData }) => (
                <CourseCard course={course} teacher={teacherData} language={language} class={cardClass} />
            ))
        ) : (
            <p>{language === 'HU' ? 'Jelenleg nincs meghirdetett tanfolyam.' : 'No upcoming courses at the moment.'}</p>
        )
    }
</div>

<style>
    .courses-container {
        display: block;
        width: 100%;
        clear: both;
    }
</style>
