@use 'sass:math';
@use 'sass:map';
@use '_breakpoints' as breakpoints;

$grid-columns: 12;

$grid-gaps: (
  '0': 0,
  '1': 10px,
  '2': 20px,
  '3': 30px,
  'five': 5px,
);

$layout-values: flex-start, flex-end, center, space-between, space-around;

//base layout classes
.container {
  width: 100%;
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;

  @include breakpoints.xs {
    max-width: map.get(breakpoints.$container-max-widths, 'xs');
    padding: 0 14px;
  }

  @include breakpoints.sm {
    max-width: map.get(breakpoints.$container-max-widths, 'sm');
    padding: 0;
  }

  @include breakpoints.md {
    max-width: map.get(breakpoints.$container-max-widths, 'md');
    // padding: 0 21px;
  }

  @include breakpoints.lg {
    max-width: map.get(breakpoints.$container-max-widths, 'lg');
  }

  @include breakpoints.xl {
    max-width: map.get(breakpoints.$container-max-widths, 'xl');
    // padding: 0 24px;
  }

  @include breakpoints.xxl {
    max-width: map.get(breakpoints.$container-max-widths, 'xxl');
  }
}

.container-fluid {
  width: 100vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw !important;
  margin-right: -50vw !important;
}

.container-fluid-right {
  width: 100vw;
  position: relative;
  left: 0;
  right: 50%;
  margin-right: -50vw;
}

.container--tight-desktop {
  @media only screen and (min-width: 992px) {
    width: 670px;
    margin: 0 auto;
  }
}

.row {
  display: flex;
  flex-flow: row wrap;
}

//grid gaps
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val !important;
    margin-right: -$val !important;
  }
}

// justify content classes
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}

// col classes
@include breakpoints.xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include breakpoints.sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include breakpoints.md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include breakpoints.lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include breakpoints.xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include breakpoints.xxl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xxl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
